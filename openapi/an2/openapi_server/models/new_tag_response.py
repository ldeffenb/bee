# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class NewTagResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uid=None, started_at=None, total=None, processed=None, synced=None):  # noqa: E501
        """NewTagResponse - a model defined in OpenAPI

        :param uid: The uid of this NewTagResponse.  # noqa: E501
        :type uid: int
        :param started_at: The started_at of this NewTagResponse.  # noqa: E501
        :type started_at: datetime
        :param total: The total of this NewTagResponse.  # noqa: E501
        :type total: int
        :param processed: The processed of this NewTagResponse.  # noqa: E501
        :type processed: int
        :param synced: The synced of this NewTagResponse.  # noqa: E501
        :type synced: int
        """
        self.openapi_types = {
            'uid': int,
            'started_at': datetime,
            'total': int,
            'processed': int,
            'synced': int
        }

        self.attribute_map = {
            'uid': 'uid',
            'started_at': 'startedAt',
            'total': 'total',
            'processed': 'processed',
            'synced': 'synced'
        }

        self._uid = uid
        self._started_at = started_at
        self._total = total
        self._processed = processed
        self._synced = synced

    @classmethod
    def from_dict(cls, dikt) -> 'NewTagResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewTagResponse of this NewTagResponse.  # noqa: E501
        :rtype: NewTagResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uid(self):
        """Gets the uid of this NewTagResponse.


        :return: The uid of this NewTagResponse.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this NewTagResponse.


        :param uid: The uid of this NewTagResponse.
        :type uid: int
        """

        self._uid = uid

    @property
    def started_at(self):
        """Gets the started_at of this NewTagResponse.


        :return: The started_at of this NewTagResponse.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this NewTagResponse.


        :param started_at: The started_at of this NewTagResponse.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def total(self):
        """Gets the total of this NewTagResponse.


        :return: The total of this NewTagResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this NewTagResponse.


        :param total: The total of this NewTagResponse.
        :type total: int
        """

        self._total = total

    @property
    def processed(self):
        """Gets the processed of this NewTagResponse.


        :return: The processed of this NewTagResponse.
        :rtype: int
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """Sets the processed of this NewTagResponse.


        :param processed: The processed of this NewTagResponse.
        :type processed: int
        """

        self._processed = processed

    @property
    def synced(self):
        """Gets the synced of this NewTagResponse.


        :return: The synced of this NewTagResponse.
        :rtype: int
        """
        return self._synced

    @synced.setter
    def synced(self, synced):
        """Sets the synced of this NewTagResponse.


        :param synced: The synced of this NewTagResponse.
        :type synced: int
        """

        self._synced = synced
