# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class NewTagDebugResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total=None, split=None, seen=None, stored=None, sent=None, synced=None, uid=None, address=None, started_at=None):  # noqa: E501
        """NewTagDebugResponse - a model defined in OpenAPI

        :param total: The total of this NewTagDebugResponse.  # noqa: E501
        :type total: int
        :param split: The split of this NewTagDebugResponse.  # noqa: E501
        :type split: int
        :param seen: The seen of this NewTagDebugResponse.  # noqa: E501
        :type seen: int
        :param stored: The stored of this NewTagDebugResponse.  # noqa: E501
        :type stored: int
        :param sent: The sent of this NewTagDebugResponse.  # noqa: E501
        :type sent: int
        :param synced: The synced of this NewTagDebugResponse.  # noqa: E501
        :type synced: int
        :param uid: The uid of this NewTagDebugResponse.  # noqa: E501
        :type uid: int
        :param address: The address of this NewTagDebugResponse.  # noqa: E501
        :type address: str
        :param started_at: The started_at of this NewTagDebugResponse.  # noqa: E501
        :type started_at: datetime
        """
        self.openapi_types = {
            'total': int,
            'split': int,
            'seen': int,
            'stored': int,
            'sent': int,
            'synced': int,
            'uid': int,
            'address': str,
            'started_at': datetime
        }

        self.attribute_map = {
            'total': 'total',
            'split': 'split',
            'seen': 'seen',
            'stored': 'stored',
            'sent': 'sent',
            'synced': 'synced',
            'uid': 'uid',
            'address': 'address',
            'started_at': 'startedAt'
        }

        self._total = total
        self._split = split
        self._seen = seen
        self._stored = stored
        self._sent = sent
        self._synced = synced
        self._uid = uid
        self._address = address
        self._started_at = started_at

    @classmethod
    def from_dict(cls, dikt) -> 'NewTagDebugResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewTagDebugResponse of this NewTagDebugResponse.  # noqa: E501
        :rtype: NewTagDebugResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total(self):
        """Gets the total of this NewTagDebugResponse.


        :return: The total of this NewTagDebugResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this NewTagDebugResponse.


        :param total: The total of this NewTagDebugResponse.
        :type total: int
        """

        self._total = total

    @property
    def split(self):
        """Gets the split of this NewTagDebugResponse.


        :return: The split of this NewTagDebugResponse.
        :rtype: int
        """
        return self._split

    @split.setter
    def split(self, split):
        """Sets the split of this NewTagDebugResponse.


        :param split: The split of this NewTagDebugResponse.
        :type split: int
        """

        self._split = split

    @property
    def seen(self):
        """Gets the seen of this NewTagDebugResponse.


        :return: The seen of this NewTagDebugResponse.
        :rtype: int
        """
        return self._seen

    @seen.setter
    def seen(self, seen):
        """Sets the seen of this NewTagDebugResponse.


        :param seen: The seen of this NewTagDebugResponse.
        :type seen: int
        """

        self._seen = seen

    @property
    def stored(self):
        """Gets the stored of this NewTagDebugResponse.


        :return: The stored of this NewTagDebugResponse.
        :rtype: int
        """
        return self._stored

    @stored.setter
    def stored(self, stored):
        """Sets the stored of this NewTagDebugResponse.


        :param stored: The stored of this NewTagDebugResponse.
        :type stored: int
        """

        self._stored = stored

    @property
    def sent(self):
        """Gets the sent of this NewTagDebugResponse.


        :return: The sent of this NewTagDebugResponse.
        :rtype: int
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this NewTagDebugResponse.


        :param sent: The sent of this NewTagDebugResponse.
        :type sent: int
        """

        self._sent = sent

    @property
    def synced(self):
        """Gets the synced of this NewTagDebugResponse.


        :return: The synced of this NewTagDebugResponse.
        :rtype: int
        """
        return self._synced

    @synced.setter
    def synced(self, synced):
        """Sets the synced of this NewTagDebugResponse.


        :param synced: The synced of this NewTagDebugResponse.
        :type synced: int
        """

        self._synced = synced

    @property
    def uid(self):
        """Gets the uid of this NewTagDebugResponse.


        :return: The uid of this NewTagDebugResponse.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this NewTagDebugResponse.


        :param uid: The uid of this NewTagDebugResponse.
        :type uid: int
        """

        self._uid = uid

    @property
    def address(self):
        """Gets the address of this NewTagDebugResponse.


        :return: The address of this NewTagDebugResponse.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this NewTagDebugResponse.


        :param address: The address of this NewTagDebugResponse.
        :type address: str
        """
        if address is not None and not re.search(r'^[A-Fa-f0-9]{64}$', address):  # noqa: E501
            raise ValueError("Invalid value for `address`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{64}$/`")  # noqa: E501

        self._address = address

    @property
    def started_at(self):
        """Gets the started_at of this NewTagDebugResponse.


        :return: The started_at of this NewTagDebugResponse.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this NewTagDebugResponse.


        :param started_at: The started_at of this NewTagDebugResponse.
        :type started_at: datetime
        """

        self._started_at = started_at
