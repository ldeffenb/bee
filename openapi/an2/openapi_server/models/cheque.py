# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Cheque(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beneficiary=None, chequebook=None, payout=None):  # noqa: E501
        """Cheque - a model defined in OpenAPI

        :param beneficiary: The beneficiary of this Cheque.  # noqa: E501
        :type beneficiary: str
        :param chequebook: The chequebook of this Cheque.  # noqa: E501
        :type chequebook: str
        :param payout: The payout of this Cheque.  # noqa: E501
        :type payout: int
        """
        self.openapi_types = {
            'beneficiary': str,
            'chequebook': str,
            'payout': int
        }

        self.attribute_map = {
            'beneficiary': 'beneficiary',
            'chequebook': 'chequebook',
            'payout': 'payout'
        }

        self._beneficiary = beneficiary
        self._chequebook = chequebook
        self._payout = payout

    @classmethod
    def from_dict(cls, dikt) -> 'Cheque':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Cheque of this Cheque.  # noqa: E501
        :rtype: Cheque
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beneficiary(self):
        """Gets the beneficiary of this Cheque.


        :return: The beneficiary of this Cheque.
        :rtype: str
        """
        return self._beneficiary

    @beneficiary.setter
    def beneficiary(self, beneficiary):
        """Sets the beneficiary of this Cheque.


        :param beneficiary: The beneficiary of this Cheque.
        :type beneficiary: str
        """
        if beneficiary is not None and not re.search(r'^[A-Fa-f0-9]{40}$', beneficiary):  # noqa: E501
            raise ValueError("Invalid value for `beneficiary`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{40}$/`")  # noqa: E501

        self._beneficiary = beneficiary

    @property
    def chequebook(self):
        """Gets the chequebook of this Cheque.


        :return: The chequebook of this Cheque.
        :rtype: str
        """
        return self._chequebook

    @chequebook.setter
    def chequebook(self, chequebook):
        """Sets the chequebook of this Cheque.


        :param chequebook: The chequebook of this Cheque.
        :type chequebook: str
        """
        if chequebook is not None and not re.search(r'^[A-Fa-f0-9]{40}$', chequebook):  # noqa: E501
            raise ValueError("Invalid value for `chequebook`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{40}$/`")  # noqa: E501

        self._chequebook = chequebook

    @property
    def payout(self):
        """Gets the payout of this Cheque.


        :return: The payout of this Cheque.
        :rtype: int
        """
        return self._payout

    @payout.setter
    def payout(self, payout):
        """Sets the payout of this Cheque.


        :param payout: The payout of this Cheque.
        :type payout: int
        """

        self._payout = payout
