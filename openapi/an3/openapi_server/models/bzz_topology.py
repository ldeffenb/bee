# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.bzz_topology_bins import BzzTopologyBins
import re
from openapi_server import util

from openapi_server.models.bzz_topology_bins import BzzTopologyBins  # noqa: E501
import re  # noqa: E501

class BzzTopology(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_addr=None, population=None, connected=None, timestamp=None, nn_low_watermark=None, depth=None, bins=None):  # noqa: E501
        """BzzTopology - a model defined in OpenAPI

        :param base_addr: The base_addr of this BzzTopology.  # noqa: E501
        :type base_addr: str
        :param population: The population of this BzzTopology.  # noqa: E501
        :type population: int
        :param connected: The connected of this BzzTopology.  # noqa: E501
        :type connected: int
        :param timestamp: The timestamp of this BzzTopology.  # noqa: E501
        :type timestamp: str
        :param nn_low_watermark: The nn_low_watermark of this BzzTopology.  # noqa: E501
        :type nn_low_watermark: int
        :param depth: The depth of this BzzTopology.  # noqa: E501
        :type depth: int
        :param bins: The bins of this BzzTopology.  # noqa: E501
        :type bins: Dict[str, BzzTopologyBins]
        """
        self.openapi_types = {
            'base_addr': str,
            'population': int,
            'connected': int,
            'timestamp': str,
            'nn_low_watermark': int,
            'depth': int,
            'bins': Dict[str, BzzTopologyBins]
        }

        self.attribute_map = {
            'base_addr': 'baseAddr',
            'population': 'population',
            'connected': 'connected',
            'timestamp': 'timestamp',
            'nn_low_watermark': 'nnLowWatermark',
            'depth': 'depth',
            'bins': 'bins'
        }

        self._base_addr = base_addr
        self._population = population
        self._connected = connected
        self._timestamp = timestamp
        self._nn_low_watermark = nn_low_watermark
        self._depth = depth
        self._bins = bins

    @classmethod
    def from_dict(cls, dikt) -> 'BzzTopology':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BzzTopology of this BzzTopology.  # noqa: E501
        :rtype: BzzTopology
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_addr(self):
        """Gets the base_addr of this BzzTopology.


        :return: The base_addr of this BzzTopology.
        :rtype: str
        """
        return self._base_addr

    @base_addr.setter
    def base_addr(self, base_addr):
        """Sets the base_addr of this BzzTopology.


        :param base_addr: The base_addr of this BzzTopology.
        :type base_addr: str
        """
        if base_addr is not None and not re.search(r'^[A-Fa-f0-9]{64}$', base_addr):  # noqa: E501
            raise ValueError("Invalid value for `base_addr`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{64}$/`")  # noqa: E501

        self._base_addr = base_addr

    @property
    def population(self):
        """Gets the population of this BzzTopology.


        :return: The population of this BzzTopology.
        :rtype: int
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this BzzTopology.


        :param population: The population of this BzzTopology.
        :type population: int
        """

        self._population = population

    @property
    def connected(self):
        """Gets the connected of this BzzTopology.


        :return: The connected of this BzzTopology.
        :rtype: int
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this BzzTopology.


        :param connected: The connected of this BzzTopology.
        :type connected: int
        """

        self._connected = connected

    @property
    def timestamp(self):
        """Gets the timestamp of this BzzTopology.


        :return: The timestamp of this BzzTopology.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BzzTopology.


        :param timestamp: The timestamp of this BzzTopology.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def nn_low_watermark(self):
        """Gets the nn_low_watermark of this BzzTopology.


        :return: The nn_low_watermark of this BzzTopology.
        :rtype: int
        """
        return self._nn_low_watermark

    @nn_low_watermark.setter
    def nn_low_watermark(self, nn_low_watermark):
        """Sets the nn_low_watermark of this BzzTopology.


        :param nn_low_watermark: The nn_low_watermark of this BzzTopology.
        :type nn_low_watermark: int
        """

        self._nn_low_watermark = nn_low_watermark

    @property
    def depth(self):
        """Gets the depth of this BzzTopology.


        :return: The depth of this BzzTopology.
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this BzzTopology.


        :param depth: The depth of this BzzTopology.
        :type depth: int
        """

        self._depth = depth

    @property
    def bins(self):
        """Gets the bins of this BzzTopology.


        :return: The bins of this BzzTopology.
        :rtype: Dict[str, BzzTopologyBins]
        """
        return self._bins

    @bins.setter
    def bins(self, bins):
        """Sets the bins of this BzzTopology.


        :param bins: The bins of this BzzTopology.
        :type bins: Dict[str, BzzTopologyBins]
        """

        self._bins = bins
