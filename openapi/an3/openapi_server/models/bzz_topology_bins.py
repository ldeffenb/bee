# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class BzzTopologyBins(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, population=None, connected=None, disconnected_peers=None, connected_peers=None):  # noqa: E501
        """BzzTopologyBins - a model defined in OpenAPI

        :param population: The population of this BzzTopologyBins.  # noqa: E501
        :type population: int
        :param connected: The connected of this BzzTopologyBins.  # noqa: E501
        :type connected: int
        :param disconnected_peers: The disconnected_peers of this BzzTopologyBins.  # noqa: E501
        :type disconnected_peers: object
        :param connected_peers: The connected_peers of this BzzTopologyBins.  # noqa: E501
        :type connected_peers: object
        """
        self.openapi_types = {
            'population': int,
            'connected': int,
            'disconnected_peers': object,
            'connected_peers': object
        }

        self.attribute_map = {
            'population': 'population',
            'connected': 'connected',
            'disconnected_peers': 'disconnectedPeers',
            'connected_peers': 'connectedPeers'
        }

        self._population = population
        self._connected = connected
        self._disconnected_peers = disconnected_peers
        self._connected_peers = connected_peers

    @classmethod
    def from_dict(cls, dikt) -> 'BzzTopologyBins':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BzzTopology_bins of this BzzTopologyBins.  # noqa: E501
        :rtype: BzzTopologyBins
        """
        return util.deserialize_model(dikt, cls)

    @property
    def population(self):
        """Gets the population of this BzzTopologyBins.


        :return: The population of this BzzTopologyBins.
        :rtype: int
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this BzzTopologyBins.


        :param population: The population of this BzzTopologyBins.
        :type population: int
        """

        self._population = population

    @property
    def connected(self):
        """Gets the connected of this BzzTopologyBins.


        :return: The connected of this BzzTopologyBins.
        :rtype: int
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this BzzTopologyBins.


        :param connected: The connected of this BzzTopologyBins.
        :type connected: int
        """

        self._connected = connected

    @property
    def disconnected_peers(self):
        """Gets the disconnected_peers of this BzzTopologyBins.


        :return: The disconnected_peers of this BzzTopologyBins.
        :rtype: object
        """
        return self._disconnected_peers

    @disconnected_peers.setter
    def disconnected_peers(self, disconnected_peers):
        """Sets the disconnected_peers of this BzzTopologyBins.


        :param disconnected_peers: The disconnected_peers of this BzzTopologyBins.
        :type disconnected_peers: object
        """

        self._disconnected_peers = disconnected_peers

    @property
    def connected_peers(self):
        """Gets the connected_peers of this BzzTopologyBins.


        :return: The connected_peers of this BzzTopologyBins.
        :rtype: object
        """
        return self._connected_peers

    @connected_peers.setter
    def connected_peers(self, connected_peers):
        """Sets the connected_peers of this BzzTopologyBins.


        :param connected_peers: The connected_peers of this BzzTopologyBins.
        :type connected_peers: object
        """

        self._connected_peers = connected_peers
