# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Addresses(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, overlay=None, underlay=None, ethereum=None, public_key=None, pss_public_key=None):  # noqa: E501
        """Addresses - a model defined in OpenAPI

        :param overlay: The overlay of this Addresses.  # noqa: E501
        :type overlay: str
        :param underlay: The underlay of this Addresses.  # noqa: E501
        :type underlay: List[str]
        :param ethereum: The ethereum of this Addresses.  # noqa: E501
        :type ethereum: str
        :param public_key: The public_key of this Addresses.  # noqa: E501
        :type public_key: str
        :param pss_public_key: The pss_public_key of this Addresses.  # noqa: E501
        :type pss_public_key: str
        """
        self.openapi_types = {
            'overlay': str,
            'underlay': List[str],
            'ethereum': str,
            'public_key': str,
            'pss_public_key': str
        }

        self.attribute_map = {
            'overlay': 'overlay',
            'underlay': 'underlay',
            'ethereum': 'ethereum',
            'public_key': 'public_key',
            'pss_public_key': 'pss_public_key'
        }

        self._overlay = overlay
        self._underlay = underlay
        self._ethereum = ethereum
        self._public_key = public_key
        self._pss_public_key = pss_public_key

    @classmethod
    def from_dict(cls, dikt) -> 'Addresses':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Addresses of this Addresses.  # noqa: E501
        :rtype: Addresses
        """
        return util.deserialize_model(dikt, cls)

    @property
    def overlay(self):
        """Gets the overlay of this Addresses.


        :return: The overlay of this Addresses.
        :rtype: str
        """
        return self._overlay

    @overlay.setter
    def overlay(self, overlay):
        """Sets the overlay of this Addresses.


        :param overlay: The overlay of this Addresses.
        :type overlay: str
        """
        if overlay is not None and not re.search(r'^[A-Fa-f0-9]{64}$', overlay):  # noqa: E501
            raise ValueError("Invalid value for `overlay`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{64}$/`")  # noqa: E501

        self._overlay = overlay

    @property
    def underlay(self):
        """Gets the underlay of this Addresses.


        :return: The underlay of this Addresses.
        :rtype: List[str]
        """
        return self._underlay

    @underlay.setter
    def underlay(self, underlay):
        """Sets the underlay of this Addresses.


        :param underlay: The underlay of this Addresses.
        :type underlay: List[str]
        """

        self._underlay = underlay

    @property
    def ethereum(self):
        """Gets the ethereum of this Addresses.


        :return: The ethereum of this Addresses.
        :rtype: str
        """
        return self._ethereum

    @ethereum.setter
    def ethereum(self, ethereum):
        """Sets the ethereum of this Addresses.


        :param ethereum: The ethereum of this Addresses.
        :type ethereum: str
        """
        if ethereum is not None and not re.search(r'^[A-Fa-f0-9]{40}$', ethereum):  # noqa: E501
            raise ValueError("Invalid value for `ethereum`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{40}$/`")  # noqa: E501

        self._ethereum = ethereum

    @property
    def public_key(self):
        """Gets the public_key of this Addresses.


        :return: The public_key of this Addresses.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this Addresses.


        :param public_key: The public_key of this Addresses.
        :type public_key: str
        """
        if public_key is not None and not re.search(r'^[A-Fa-f0-9]{66}$', public_key):  # noqa: E501
            raise ValueError("Invalid value for `public_key`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{66}$/`")  # noqa: E501

        self._public_key = public_key

    @property
    def pss_public_key(self):
        """Gets the pss_public_key of this Addresses.


        :return: The pss_public_key of this Addresses.
        :rtype: str
        """
        return self._pss_public_key

    @pss_public_key.setter
    def pss_public_key(self, pss_public_key):
        """Sets the pss_public_key of this Addresses.


        :param pss_public_key: The pss_public_key of this Addresses.
        :type pss_public_key: str
        """
        if pss_public_key is not None and not re.search(r'^[A-Fa-f0-9]{66}$', pss_public_key):  # noqa: E501
            raise ValueError("Invalid value for `pss_public_key`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{66}$/`")  # noqa: E501

        self._pss_public_key = pss_public_key
