# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.settlement import Settlement
from openapi_server import util

from openapi_server.models.settlement import Settlement  # noqa: E501

class Settlements(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, totalreceived=None, totalsent=None, settlements=None):  # noqa: E501
        """Settlements - a model defined in OpenAPI

        :param totalreceived: The totalreceived of this Settlements.  # noqa: E501
        :type totalreceived: int
        :param totalsent: The totalsent of this Settlements.  # noqa: E501
        :type totalsent: int
        :param settlements: The settlements of this Settlements.  # noqa: E501
        :type settlements: List[Settlement]
        """
        self.openapi_types = {
            'totalreceived': int,
            'totalsent': int,
            'settlements': List[Settlement]
        }

        self.attribute_map = {
            'totalreceived': 'totalreceived',
            'totalsent': 'totalsent',
            'settlements': 'settlements'
        }

        self._totalreceived = totalreceived
        self._totalsent = totalsent
        self._settlements = settlements

    @classmethod
    def from_dict(cls, dikt) -> 'Settlements':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Settlements of this Settlements.  # noqa: E501
        :rtype: Settlements
        """
        return util.deserialize_model(dikt, cls)

    @property
    def totalreceived(self):
        """Gets the totalreceived of this Settlements.


        :return: The totalreceived of this Settlements.
        :rtype: int
        """
        return self._totalreceived

    @totalreceived.setter
    def totalreceived(self, totalreceived):
        """Sets the totalreceived of this Settlements.


        :param totalreceived: The totalreceived of this Settlements.
        :type totalreceived: int
        """

        self._totalreceived = totalreceived

    @property
    def totalsent(self):
        """Gets the totalsent of this Settlements.


        :return: The totalsent of this Settlements.
        :rtype: int
        """
        return self._totalsent

    @totalsent.setter
    def totalsent(self, totalsent):
        """Sets the totalsent of this Settlements.


        :param totalsent: The totalsent of this Settlements.
        :type totalsent: int
        """

        self._totalsent = totalsent

    @property
    def settlements(self):
        """Gets the settlements of this Settlements.


        :return: The settlements of this Settlements.
        :rtype: List[Settlement]
        """
        return self._settlements

    @settlements.setter
    def settlements(self, settlements):
        """Sets the settlements of this Settlements.


        :param settlements: The settlements of this Settlements.
        :type settlements: List[Settlement]
        """

        self._settlements = settlements
