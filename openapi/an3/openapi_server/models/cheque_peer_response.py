# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.cheque import Cheque
import re
from openapi_server import util

from openapi_server.models.cheque import Cheque  # noqa: E501
import re  # noqa: E501

class ChequePeerResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, peer=None, lastreceived=None, lastsent=None):  # noqa: E501
        """ChequePeerResponse - a model defined in OpenAPI

        :param peer: The peer of this ChequePeerResponse.  # noqa: E501
        :type peer: str
        :param lastreceived: The lastreceived of this ChequePeerResponse.  # noqa: E501
        :type lastreceived: Cheque
        :param lastsent: The lastsent of this ChequePeerResponse.  # noqa: E501
        :type lastsent: Cheque
        """
        self.openapi_types = {
            'peer': str,
            'lastreceived': Cheque,
            'lastsent': Cheque
        }

        self.attribute_map = {
            'peer': 'peer',
            'lastreceived': 'lastreceived',
            'lastsent': 'lastsent'
        }

        self._peer = peer
        self._lastreceived = lastreceived
        self._lastsent = lastsent

    @classmethod
    def from_dict(cls, dikt) -> 'ChequePeerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChequePeerResponse of this ChequePeerResponse.  # noqa: E501
        :rtype: ChequePeerResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def peer(self):
        """Gets the peer of this ChequePeerResponse.


        :return: The peer of this ChequePeerResponse.
        :rtype: str
        """
        return self._peer

    @peer.setter
    def peer(self, peer):
        """Sets the peer of this ChequePeerResponse.


        :param peer: The peer of this ChequePeerResponse.
        :type peer: str
        """
        if peer is not None and not re.search(r'^[A-Fa-f0-9]{64}$', peer):  # noqa: E501
            raise ValueError("Invalid value for `peer`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{64}$/`")  # noqa: E501

        self._peer = peer

    @property
    def lastreceived(self):
        """Gets the lastreceived of this ChequePeerResponse.


        :return: The lastreceived of this ChequePeerResponse.
        :rtype: Cheque
        """
        return self._lastreceived

    @lastreceived.setter
    def lastreceived(self, lastreceived):
        """Sets the lastreceived of this ChequePeerResponse.


        :param lastreceived: The lastreceived of this ChequePeerResponse.
        :type lastreceived: Cheque
        """

        self._lastreceived = lastreceived

    @property
    def lastsent(self):
        """Gets the lastsent of this ChequePeerResponse.


        :return: The lastsent of this ChequePeerResponse.
        :rtype: Cheque
        """
        return self._lastsent

    @lastsent.setter
    def lastsent(self, lastsent):
        """Sets the lastsent of this ChequePeerResponse.


        :param lastsent: The lastsent of this ChequePeerResponse.
        :type lastsent: Cheque
        """

        self._lastsent = lastsent
